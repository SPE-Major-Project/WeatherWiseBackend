# Persistent Volume
apiVersion: apps/v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  namespace: webapps
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
    path: "/mnt/data"  # - for Unix/Linux
    type: DirectoryOrCreate
---

# Persistent Volume Claim
apiVersion: apps/v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: webapps
spec:
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual
  accessModes:
    - ReadWriteOnce

# StatefulSet - MySql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: webapps
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: rishabh@123
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            # - name: mysql-initdb
            #   mountPath: /docker-entrypoint-initdb.d
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        # - name: mysql-initdb
        #   configMap:
        #     name: mysql-initdb-cm
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc

# Headless Service
---
apiVersion: apps/v1
kind: Service
metadata:
  name: mysql
  namespace: webapps
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - port: 3306

# Config
---

# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: mysql-initdb-cm
# data:
#   init.sql: |
#     CREATE DATABASE IF NOT EXISTS orderdb;
#     CREATE DATABASE IF NOT EXISTS paymentdb;
#     CREATE DATABASE IF NOT EXISTS productdb;